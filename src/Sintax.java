
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 28 15:14:58 BRST 2019
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 28 15:14:58 BRST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\004\005\000\002\004\007\000\002\006\006" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\006\010\000\002\006\010\000\002" +
    "\006\010\000\002\006\010\000\002\006\006\000\002\006" +
    "\010\000\002\006\010\000\002\006\010\000\002\006\010" +
    "\000\002\006\010\000\002\006\010\000\002\006\010\000" +
    "\002\006\010\000\002\005\013\000\002\005\020\000\002" +
    "\013\010\000\002\011\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\012\006\000\002\012\006\000\002\007\013\000" +
    "\002\014\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\027\004\001\002\000\004\032\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\031\010\001\002\000\020\006\026\010\014\013" +
    "\015\017\027\032\022\034\024\035\017\001\002\000\026" +
    "\002\ufff4\006\ufff4\010\ufff4\013\ufff4\017\ufff4\020\ufff4\032" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\001\002\000\026\002\ufff2" +
    "\006\ufff2\010\ufff2\013\ufff2\017\ufff2\020\ufff2\032\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\001\002\000\026\002\ufffc\006\ufffc" +
    "\010\ufffc\013\ufffc\017\ufffc\020\ufffc\032\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\001\002\000\004\025\162\001\002\000\004" +
    "\025\152\001\002\000\026\002\ufffe\006\ufffe\010\ufffe\013" +
    "\ufffe\017\ufffe\020\ufffe\032\ufffe\034\ufffe\035\ufffe\036\ufffe" +
    "\001\002\000\020\006\026\010\014\013\015\017\027\032" +
    "\022\034\024\035\017\001\002\000\026\002\ufff6\006\ufff6" +
    "\010\ufff6\013\ufff6\017\ufff6\020\ufff6\032\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\001\002\000\026\002\ufff8\006\ufff8\010\ufff8" +
    "\013\ufff8\017\ufff8\020\ufff8\032\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\001\002\000\004\014\055\001\002\000\022\002\000" +
    "\006\026\010\014\013\015\017\027\032\022\034\024\035" +
    "\017\001\002\000\004\025\050\001\002\000\026\002\ufffa" +
    "\006\ufffa\010\ufffa\013\ufffa\017\ufffa\020\ufffa\032\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\001\002\000\004\032\043\001\002" +
    "\000\020\006\026\010\014\013\015\017\027\032\022\034" +
    "\024\035\017\001\002\000\022\006\026\010\014\013\015" +
    "\017\027\020\035\032\022\034\024\035\017\001\002\000" +
    "\026\002\ufffd\006\ufffd\010\ufffd\013\ufffd\017\ufffd\020\ufffd" +
    "\032\ufffd\034\ufffd\035\ufffd\036\ufffd\001\002\000\026\002" +
    "\ufff5\006\ufff5\010\ufff5\013\ufff5\017\ufff5\020\ufff5\032\ufff5" +
    "\034\ufff5\035\ufff5\036\ufff5\001\002\000\026\002\ufff3\006" +
    "\ufff3\010\ufff3\013\ufff3\017\ufff3\020\ufff3\032\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\001\002\000\026\002\uffff\006\uffff\010" +
    "\uffff\013\uffff\017\uffff\020\uffff\032\uffff\034\uffff\035\uffff" +
    "\036\uffff\001\002\000\006\030\041\031\042\001\002\000" +
    "\026\002\ufff7\006\ufff7\010\ufff7\013\ufff7\017\ufff7\020\ufff7" +
    "\032\ufff7\034\ufff7\035\ufff7\036\ufff7\001\002\000\026\002" +
    "\ufff9\006\ufff9\010\ufff9\013\ufff9\017\ufff9\020\ufff9\032\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\001\002\000\026\002\ufffb\006" +
    "\ufffb\010\ufffb\013\ufffb\017\ufffb\020\ufffb\032\ufffb\034\ufffb" +
    "\035\ufffb\036\ufffb\001\002\000\026\002\uffd3\006\uffd3\010" +
    "\uffd3\013\uffd3\017\uffd3\020\uffd3\032\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\001\002\000\026\002\uffd4\006\uffd4\010\uffd4\013" +
    "\uffd4\017\uffd4\020\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\001\002\000\006\014\045\031\044\001\002\000\026\002" +
    "\ufff1\006\ufff1\010\ufff1\013\ufff1\017\ufff1\020\ufff1\032\ufff1" +
    "\034\ufff1\035\ufff1\036\ufff1\001\002\000\004\043\046\001" +
    "\002\000\004\031\047\001\002\000\026\002\ufff0\006\ufff0" +
    "\010\ufff0\013\ufff0\017\ufff0\020\ufff0\032\ufff0\034\ufff0\035" +
    "\ufff0\036\ufff0\001\002\000\004\032\051\001\002\000\004" +
    "\032\052\001\002\000\004\026\053\001\002\000\004\031" +
    "\054\001\002\000\026\002\uffdb\006\uffdb\010\uffdb\013\uffdb" +
    "\017\uffdb\020\uffdb\032\uffdb\034\uffdb\035\uffdb\036\uffdb\001" +
    "\002\000\006\032\057\043\056\001\002\000\014\031\107" +
    "\037\110\040\111\041\105\042\106\001\002\000\014\031" +
    "\062\037\064\040\063\041\060\042\061\001\002\000\006" +
    "\032\102\043\101\001\002\000\006\032\076\043\075\001" +
    "\002\000\026\002\uffef\006\uffef\010\uffef\013\uffef\017\uffef" +
    "\020\uffef\032\uffef\034\uffef\035\uffef\036\uffef\001\002\000" +
    "\006\032\072\043\071\001\002\000\006\032\066\043\065" +
    "\001\002\000\004\031\070\001\002\000\004\031\067\001" +
    "\002\000\026\002\uffee\006\uffee\010\uffee\013\uffee\017\uffee" +
    "\020\uffee\032\uffee\034\uffee\035\uffee\036\uffee\001\002\000" +
    "\026\002\uffed\006\uffed\010\uffed\013\uffed\017\uffed\020\uffed" +
    "\032\uffed\034\uffed\035\uffed\036\uffed\001\002\000\004\031" +
    "\074\001\002\000\004\031\073\001\002\000\026\002\uffea" +
    "\006\uffea\010\uffea\013\uffea\017\uffea\020\uffea\032\uffea\034" +
    "\uffea\035\uffea\036\uffea\001\002\000\026\002\uffe9\006\uffe9" +
    "\010\uffe9\013\uffe9\017\uffe9\020\uffe9\032\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\001\002\000\004\031\100\001\002\000\004" +
    "\031\077\001\002\000\026\002\uffec\006\uffec\010\uffec\013" +
    "\uffec\017\uffec\020\uffec\032\uffec\034\uffec\035\uffec\036\uffec" +
    "\001\002\000\026\002\uffeb\006\uffeb\010\uffeb\013\uffeb\017" +
    "\uffeb\020\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb\001\002" +
    "\000\004\031\104\001\002\000\004\031\103\001\002\000" +
    "\026\002\uffe8\006\uffe8\010\uffe8\013\uffe8\017\uffe8\020\uffe8" +
    "\032\uffe8\034\uffe8\035\uffe8\036\uffe8\001\002\000\026\002" +
    "\uffe7\006\uffe7\010\uffe7\013\uffe7\017\uffe7\020\uffe7\032\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\001\002\000\006\032\127\043" +
    "\126\001\002\000\006\032\123\043\122\001\002\000\026" +
    "\002\uffe6\006\uffe6\010\uffe6\013\uffe6\017\uffe6\020\uffe6\032" +
    "\uffe6\034\uffe6\035\uffe6\036\uffe6\001\002\000\006\032\117" +
    "\043\116\001\002\000\006\032\113\043\112\001\002\000" +
    "\004\031\115\001\002\000\004\031\114\001\002\000\026" +
    "\002\uffe3\006\uffe3\010\uffe3\013\uffe3\017\uffe3\020\uffe3\032" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\001\002\000\026\002\uffe2" +
    "\006\uffe2\010\uffe2\013\uffe2\017\uffe2\020\uffe2\032\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\001\002\000\004\031\121\001\002" +
    "\000\004\031\120\001\002\000\026\002\uffe5\006\uffe5\010" +
    "\uffe5\013\uffe5\017\uffe5\020\uffe5\032\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\001\002\000\026\002\uffe4\006\uffe4\010\uffe4\013" +
    "\uffe4\017\uffe4\020\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\001\002\000\004\031\125\001\002\000\004\031\124\001" +
    "\002\000\026\002\uffdf\006\uffdf\010\uffdf\013\uffdf\017\uffdf" +
    "\020\uffdf\032\uffdf\034\uffdf\035\uffdf\036\uffdf\001\002\000" +
    "\026\002\uffde\006\uffde\010\uffde\013\uffde\017\uffde\020\uffde" +
    "\032\uffde\034\uffde\035\uffde\036\uffde\001\002\000\004\031" +
    "\131\001\002\000\004\031\130\001\002\000\026\002\uffe1" +
    "\006\uffe1\010\uffe1\013\uffe1\017\uffe1\020\uffe1\032\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\001\002\000\026\002\uffe0\006\uffe0" +
    "\010\uffe0\013\uffe0\017\uffe0\020\uffe0\032\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\001\002\000\022\006\026\010\014\013\015" +
    "\017\027\032\022\034\024\035\017\036\133\001\002\000" +
    "\004\025\134\001\002\000\010\023\137\032\140\043\135" +
    "\001\002\000\004\022\147\001\002\000\004\026\145\001" +
    "\002\000\004\026\uffda\001\002\000\004\022\141\001\002" +
    "\000\010\023\143\032\144\043\142\001\002\000\004\026" +
    "\uffd6\001\002\000\004\026\uffd7\001\002\000\004\026\uffd5" +
    "\001\002\000\004\031\146\001\002\000\026\002\uffd1\006" +
    "\uffd1\010\uffd1\013\uffd1\017\uffd1\020\uffd1\032\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\001\002\000\006\032\151\043\150\001" +
    "\002\000\004\026\uffd9\001\002\000\004\026\uffd8\001\002" +
    "\000\010\023\137\032\140\043\135\001\002\000\004\026" +
    "\154\001\002\000\004\012\155\001\002\000\004\017\156" +
    "\001\002\000\020\006\026\010\014\013\015\017\027\032" +
    "\022\034\024\035\017\001\002\000\022\006\026\010\014" +
    "\013\015\017\027\020\160\032\022\034\024\035\017\001" +
    "\002\000\004\031\161\001\002\000\026\002\uffd2\006\uffd2" +
    "\010\uffd2\013\uffd2\017\uffd2\020\uffd2\032\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\001\002\000\010\023\137\032\140\043\135" +
    "\001\002\000\004\026\164\001\002\000\004\033\165\001" +
    "\002\000\004\017\166\001\002\000\020\006\026\010\014" +
    "\013\015\017\027\032\022\034\024\035\017\001\002\000" +
    "\022\006\026\010\014\013\015\017\027\020\170\032\022" +
    "\034\024\035\017\001\002\000\004\031\171\001\002\000" +
    "\030\002\uffdd\006\uffdd\010\uffdd\011\172\013\uffdd\017\uffdd" +
    "\020\uffdd\032\uffdd\034\uffdd\035\uffdd\036\uffdd\001\002\000" +
    "\004\017\173\001\002\000\020\006\026\010\014\013\015" +
    "\017\027\032\022\034\024\035\017\001\002\000\022\006" +
    "\026\010\014\013\015\017\027\020\175\032\022\034\024" +
    "\035\017\001\002\000\004\031\176\001\002\000\026\002" +
    "\uffdc\006\uffdc\010\uffdc\013\uffdc\017\uffdc\020\uffdc\032\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\174\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\022\004\015\005\020\006\012\007\010\012\024\013" +
    "\017\014\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\131\004\015\005\020\006\012" +
    "\007\010\012\024\013\017\014\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\033" +
    "\005\036\006\030\007\031\012\037\013\035\014\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\027\004\015\005\020\006\012\007\010\012" +
    "\024\013\017\014\011\001\001\000\020\004\033\005\036" +
    "\006\030\007\031\012\037\013\035\014\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\033\005\036\006\030\007\031\012\037\013\035" +
    "\014\032\001\001\000\002\001\001\000\004\011\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\156\004\015\005" +
    "\020\006\012\007\010\012\024\013\017\014\011\001\001" +
    "\000\020\004\033\005\036\006\030\007\031\012\037\013" +
    "\035\014\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\166\004\015\005\020" +
    "\006\012\007\010\012\024\013\017\014\011\001\001\000" +
    "\020\004\033\005\036\006\030\007\031\012\037\013\035" +
    "\014\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\173\004\015\005\020\006\012" +
    "\007\010\012\024\013\017\014\011\001\001\000\020\004" +
    "\033\005\036\006\030\007\031\012\037\013\035\014\032" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // REPEAT ::= Repeat SENTENCA Until Parenteses_a SENTENCA_BOOLEANA Parenteses_f PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPEAT",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WHILE ::= While Parenteses_a SENTENCA_BOOLEANA Parenteses_f Do Begin SENTENCA End PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BEGIN ::= Begin SENTENCA End Ponto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BEGIN ::= Begin SENTENCA End PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BEGIN",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCA_BOOLEANA ::= Identificador Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCA_BOOLEANA ::= Identificador Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCA_BOOLEANA ::= Identificador Op_relacional Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCA_BOOLEANA ::= Numero Op_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCA_BOOLEANA ::= Numero Op_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCA_BOOLEANA ::= Op_booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA_BOOLEANA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ALL ::= All Parenteses_a Identificador Identificador Parenteses_f PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ALL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IF ::= If Parenteses_a SENTENCA_BOOLEANA Parenteses_f Then Begin SENTENCA End PontoVirgula Else Begin SENTENCA End PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= If Parenteses_a SENTENCA_BOOLEANA Parenteses_f Then Begin SENTENCA End PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRIBUICAO ::= Identificador Igual Numero Divisao Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATRIBUICAO ::= Identificador Igual Numero Divisao Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATRIBUICAO ::= Identificador Igual Numero Multiplicacao Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIBUICAO ::= Identificador Igual Numero Multiplicacao Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ATRIBUICAO ::= Identificador Igual Numero Subtracao Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ATRIBUICAO ::= Identificador Igual Numero Subtracao Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ATRIBUICAO ::= Identificador Igual Numero Soma Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATRIBUICAO ::= Identificador Igual Numero Soma Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ATRIBUICAO ::= Identificador Igual Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ATRIBUICAO ::= Identificador Igual Identificador Multiplicacao Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ATRIBUICAO ::= Identificador Igual Identificador Multiplicacao Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ATRIBUICAO ::= Identificador Igual Identificador Subtracao Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ATRIBUICAO ::= Identificador Igual Identificador Subtracao Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ATRIBUICAO ::= Identificador Igual Identificador Divisao Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ATRIBUICAO ::= Identificador Igual Identificador Divisao Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ATRIBUICAO ::= Identificador Igual Identificador Soma Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ATRIBUICAO ::= Identificador Igual Identificador Soma Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ATRIBUICAO ::= Identificador Igual Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACAO ::= T_dado Identificador Igual Numero PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACAO ::= T_dado Identificador PontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCA ::= REPEAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCA ::= SENTENCA REPEAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCA ::= SENTENCA WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCA ::= SENTENCA ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCA ::= SENTENCA IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCA ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCA ::= SENTENCA BEGIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCA ::= ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCA ::= SENTENCA ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCA ::= DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCA ::= SENTENCA DECLARACAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Program Identificador PontoVirgula SENTENCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

